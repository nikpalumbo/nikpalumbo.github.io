// Pricing Configurator Initialization
document.addEventListener('DOMContentLoaded', function() {
  const configurator = document.getElementById('growth-systems-config');
  const serviceTabs = document.querySelectorAll('.service-tab');
  
  if (configurator && serviceTabs.length > 0) {
    console.log('DOM loaded, checking for pricing elements...');
    
    // Service tab functionality
    serviceTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        // Remove active class from all tabs
        serviceTabs.forEach(t => t.classList.remove('active'));
        // Add active class to clicked tab
        this.classList.add('active');
        
        // Show corresponding content
        const serviceType = this.getAttribute('data-service');
        showServiceContent(serviceType);
      });
    });
    
    // Radio button visual state management
    const radioButtons = document.querySelectorAll('input[type="radio"]');
    radioButtons.forEach(radio => {
      radio.addEventListener('change', function() {
        console.log('Radio button changed:', this.value);
        updateRadioVisualState();
        calculatePrice();
        updateQuoteDisplay();
      });
    });
    
    // Checkbox visual state management
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        console.log('Checkbox changed:', this.value);
        updateCheckboxVisualState();
        calculatePrice();
        updateQuoteDisplay();
      });
    });
    
    // Add event listeners to channel checkboxes
    const channelCheckboxes = document.querySelectorAll('input[name="channel"]');
    channelCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        console.log('Channel checkbox changed:', this.value);
        updateCheckboxVisualState();
        calculatePrice();
        updateQuoteDisplay();
      });
    });
    
    // Add event listeners to CRM checkboxes
    const crmCheckboxes = document.querySelectorAll('input[name="crm"]');
    crmCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        console.log('CRM checkbox changed:', this.value);
        updateCheckboxVisualState();
        calculatePrice();
        updateQuoteDisplay();
      });
    });

    // Initial visual state update
    updateRadioVisualState();
    updateCheckboxVisualState();

    // Email start button functionality
    const emailStartBtn = document.getElementById('email-start-btn');
    if (emailStartBtn) {
      emailStartBtn.addEventListener('click', function() {
        const configData = collectConfigData();
        const emailUrl = generateQuoteEmailUrl(configData);
        window.open(emailUrl, '_blank');
      });
    }
    
    // Email activities button functionality
    const emailActivitiesBtn = document.getElementById('email-activities-btn');
    if (emailActivitiesBtn) {
      emailActivitiesBtn.addEventListener('click', function() {
        const configData = collectConfigData();
        const emailUrl = generateActivitiesEmailUrl(configData);
        window.open(emailUrl, '_blank');
      });
    }

    // Initial price calculation and quote display
    console.log('Running initial calculations...');
    calculatePrice();
    updateQuoteDisplay();
    updateActivitiesDescription(); // Initialize activities description
    
    // Add scroll event listener for sticky banner visibility
    window.addEventListener('scroll', checkStickyBannerVisibility);
    
    // Add event listeners for sticky banner buttons
    const stickyEmailBtn = document.getElementById('sticky-email-btn');
    if (stickyEmailBtn) {
      stickyEmailBtn.addEventListener('click', function() {
        const configData = collectConfigData();
        const emailUrl = generateQuoteEmailUrl(configData);
        window.open(emailUrl, '_blank');
      });
    }
    
    const stickyActivitiesBtn = document.getElementById('sticky-activities-btn');
    if (stickyActivitiesBtn) {
      stickyActivitiesBtn.addEventListener('click', function() {
        const configData = collectConfigData();
        const emailUrl = generateActivitiesEmailUrl(configData);
        window.open(emailUrl, '_blank');
      });
    }
  } else {
    console.log('Not on pricing page or elements not found');
  }
});

// Show service content based on selected tab
function showServiceContent(serviceType) {
  // Hide all service content
  const allContent = document.querySelectorAll('.pricing-content');
  allContent.forEach(content => {
    content.style.display = 'none';
  });
  
  // Show selected service content
  const selectedContent = document.getElementById(serviceType + '-content');
  if (selectedContent) {
    selectedContent.style.display = 'block';
  }
}

// Update radio button visual state
function updateRadioVisualState() {
  const radioButtons = document.querySelectorAll('input[type="radio"]');
  radioButtons.forEach(radio => {
    const label = radio.nextElementSibling;
    if (label) {
      if (radio.checked) {
        label.classList.add('selected');
      } else {
        label.classList.remove('selected');
      }
    }
  });
}

// Update checkbox visual state
function updateCheckboxVisualState() {
  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(checkbox => {
    const label = checkbox.parentElement;
    if (label) {
      if (checkbox.checked) {
        label.classList.add('selected');
      } else {
        label.classList.remove('selected');
      }
    }
  });
}

// Calculate pricing based on configuration
function calculatePrice() {
  // Check if pricing elements exist before calculating
  const companySizeElement = document.querySelector('input[name="company-size"]:checked');
  if (!companySizeElement) return; // Exit early if elements don't exist
  
  let basePrice = 5000; // Base price CHF 5,000
  
  // Company size adjustment
  const companySize = companySizeElement.value;
  if (companySize === 'sme') basePrice += 1500;      // SME: +1,500
  else if (companySize === 'enterprise') basePrice += 3500; // Enterprise: +3,500
  
  // Current stage adjustment (experience level)
  const leadStrategyElement = document.querySelector('input[name="lead-strategy"]:checked');
  if (!leadStrategyElement) return;
  const leadStrategy = leadStrategyElement.value;
  if (leadStrategy === 'increase') basePrice += 1000;  // Want to Improve: +1,000
  else if (leadStrategy === 'scale') basePrice += 2500; // Ready to Scale: +2,500
  
  // Marketing channels adjustment
  const channels = document.querySelectorAll('input[name="channel"]:checked');
  if (channels.length > 2) {
    basePrice += (channels.length - 2) * 500; // +500 per additional channel beyond base 2
  }
  
  // CRM integration complexity
  const crmSystems = document.querySelectorAll('input[name="crm"]:checked');
  if (crmSystems.length > 0) {
    // Check for complex CRMs
    const hasComplexCRM = Array.from(crmSystems).some(crm => 
      ['salesforce', 'dynamics', 'sugar'].includes(crm.value)
    );
    if (hasComplexCRM) basePrice += 1500; // Complex CRM: +1,500
    
    // Multiple CRMs add complexity
    if (crmSystems.length > 1) basePrice += 800; // Multiple CRMs: +800
  } else {
    basePrice += 300; // No CRM: +300 (setup from scratch)
  }
  
  // Optimization frequency
  const optimizationElement = document.querySelector('input[name="optimization"]:checked');
  if (!optimizationElement) return;
  const optimization = optimizationElement.value;
  if (optimization === 'monthly') basePrice += 800;      // Monthly: +800
  else if (optimization === 'bi-monthly') basePrice += 400;   // Bi-monthly: +400
  else if (optimization === 'quarterly') basePrice += 0;      // Quarterly: +0
  else if (optimization === 'bi-weekly') basePrice += 1200;   // Bi-weekly: +1,200
  
  // Delivery speed
  const deliveryElement = document.querySelector('input[name="delivery"]:checked');
  if (!deliveryElement) return;
  const delivery = deliveryElement.value;
  if (delivery === 'comprehensive') basePrice += 0;      // Comprehensive (12+ weeks): +0 (base)
  else if (delivery === 'standard') basePrice += 800;    // Standard (8-12 weeks): +800
  else if (delivery === 'fast') basePrice += 1500;       // Fast (4-6 weeks): +1,500
  
  // Update price display
  const priceElement = document.getElementById('estimated-price');
  if (priceElement) {
    priceElement.textContent = Math.round(basePrice).toLocaleString();
  }
}

// Update quote display in real-time
function updateQuoteDisplay() {
  // Company type
  const companyType = document.querySelector('input[name="company-size"]:checked');
  if (companyType && companyType.nextElementSibling) {
    const companyTypeLabel = companyType.nextElementSibling.textContent.trim();
    const companyTypeElement = document.getElementById('quote-company-type');
    if (companyTypeElement) companyTypeElement.textContent = companyTypeLabel;
  }
  
  // Lead strategy
  const leadStrategy = document.querySelector('input[name="lead-strategy"]:checked');
  if (leadStrategy && leadStrategy.nextElementSibling) {
    const leadStrategyLabel = leadStrategy.nextElementSibling.textContent.trim();
    const leadStrategyElement = document.getElementById('quote-lead-strategy');
    if (leadStrategyElement) leadStrategyElement.textContent = leadStrategyLabel;
  }
  
  // Channels
  const channels = Array.from(document.querySelectorAll('input[name="channel"]:checked'))
    .map(cb => cb.parentElement ? cb.parentElement.textContent.trim() : '')
    .filter(text => text.length > 0);
  const channelsElement = document.getElementById('quote-channels');
  if (channelsElement) channelsElement.textContent = channels.join(', ');
  
  // CRM level
  const crmSystems = Array.from(document.querySelectorAll('input[name="crm"]:checked'))
    .map(cb => cb.parentElement ? cb.parentElement.textContent.trim() : '')
    .filter(text => text.length > 0);
  const crmElement = document.getElementById('quote-crm');
  if (crmElement) crmElement.textContent = crmSystems.join(', ');
  
  // Optimization
  const optimization = document.querySelector('input[name="optimization"]:checked');
  if (optimization && optimization.nextElementSibling) {
    const optimizationLabel = optimization.nextElementSibling.textContent.trim();
    const optimizationElement = document.getElementById('quote-optimization');
    if (optimizationElement) {
      optimizationElement.textContent = optimizationLabel;
    }
  }
  
  // Delivery
  const delivery = document.querySelector('input[name="delivery"]:checked');
  if (delivery && delivery.nextElementSibling) {
    const deliveryLabel = delivery.nextElementSibling.textContent.split('(')[0].trim();
    const deliveryElement = document.getElementById('quote-delivery');
    if (deliveryElement) deliveryElement.textContent = deliveryLabel;
  }
  
  // Update activities description
  updateActivitiesDescription();
  
  // Update sticky banner price
  updateStickyBannerPrice();
  
  // Show sticky banner when quote is not visible
  checkStickyBannerVisibility();
}

// Update activities description based on current selection
function updateActivitiesDescription() {
  const activitiesList = document.getElementById('activities-list');
  if (!activitiesList) return;
  
  const companySize = document.querySelector('input[name="company-size"]:checked')?.value || 'startup';
  const leadStrategy = document.querySelector('input[name="lead-strategy"]:checked')?.value || 'starting';
  const channels = document.querySelectorAll('input[name="channel"]:checked').length;
  const crmSystems = document.querySelectorAll('input[name="crm"]:checked');
  const optimization = document.querySelector('input[name="optimization"]:checked')?.value || 'bi-weekly';
  const delivery = document.querySelector('input[name="delivery"]:checked')?.value || 'comprehensive';
  
  let activities = [];
  
  // Base activities for all packages
  activities.push('Initial business analysis and requirements gathering');
  activities.push('Growth system architecture design');
  activities.push('Marketing automation workflow setup');
  activities.push('CRM integration and data migration');
  activities.push('Team training and documentation');
  
  // Company size specific activities
  if (companySize === 'enterprise') {
    activities.push('Multi-department stakeholder alignment');
    activities.push('Enterprise security and compliance setup');
    activities.push('Advanced reporting and analytics dashboard');
    activities.push('Custom API integrations');
  } else if (companySize === 'sme') {
    activities.push('Department coordination setup');
    activities.push('Standard reporting templates');
    activities.push('Basic API integrations');
  }
  
  // Experience level specific activities
  if (leadStrategy === 'scale') {
    activities.push('Advanced optimization strategies');
    activities.push('Performance benchmarking and KPIs');
    activities.push('Scalability planning and implementation');
  } else if (leadStrategy === 'increase') {
    activities.push('Process improvement recommendations');
    activities.push('Efficiency optimization');
    activities.push('Performance monitoring setup');
  } else {
    activities.push('Complete system setup from scratch');
    activities.push('Comprehensive training program');
    activities.push('Best practices implementation');
  }
  
  // Channel specific activities
  if (channels > 2) {
    activities.push(`Multi-channel automation setup (${channels} channels)`);
    activities.push('Cross-channel campaign coordination');
  }
  
  // CRM complexity activities
  const hasComplexCRM = Array.from(crmSystems).some(crm => 
    ['salesforce', 'dynamics', 'sugar'].includes(crm.value)
  );
  if (hasComplexCRM) {
    activities.push('Advanced CRM API integration');
    activities.push('Complex workflow automation');
  }
  if (crmSystems.length > 1) {
    activities.push('Multi-CRM synchronization setup');
  }
  
  // Optimization frequency activities
  if (optimization === 'bi-weekly') {
    activities.push('Bi-weekly performance reviews and optimization');
    activities.push('Continuous improvement tracking');
  } else if (optimization === 'monthly') {
    activities.push('Monthly performance reviews and optimization');
  }
  
  // Delivery timeline activities
  if (delivery === 'fast') {
    activities.push('Rapid MVP development and deployment');
    activities.push('Priority support and quick iterations');
  } else if (delivery === 'comprehensive') {
    activities.push('Thorough testing and quality assurance');
    activities.push('Comprehensive documentation and training');
  }
  
  // Render activities list
  const activitiesHTML = activities.map(activity => `<li>${activity}</li>`).join('');
  activitiesList.innerHTML = `<ul>${activitiesHTML}</ul>`;
}

// Update sticky banner price
function updateStickyBannerPrice() {
  const stickyPrice = document.getElementById('sticky-price');
  const mainPrice = document.getElementById('estimated-price');
  
  if (stickyPrice && mainPrice) {
    stickyPrice.textContent = mainPrice.textContent;
  }
}

// Check if quote section is visible and show/hide sticky banner
function checkStickyBannerVisibility() {
  const quoteSection = document.querySelector('.config-right');
  const stickyBanner = document.getElementById('sticky-price-banner');
  
  if (!quoteSection || !stickyBanner) return;
  
  const quoteRect = quoteSection.getBoundingClientRect();
  const viewportHeight = window.innerHeight;
  
  // Show banner when quote section is not visible in viewport
  // Make it more sensitive - show banner when quote starts going out of view
  const isQuoteVisible = quoteRect.bottom > 0 && quoteRect.top < viewportHeight;
  
  // Add some debugging
  console.log('Quote rect:', quoteRect.top, quoteRect.bottom, 'Viewport:', viewportHeight, 'Visible:', isQuoteVisible);
  
  if (isQuoteVisible) {
    stickyBanner.classList.remove('visible');
  } else {
    stickyBanner.classList.add('visible');
  }
}

// Collect configuration data for email
function collectConfigData() {
  const data = {
    companySize: document.querySelector('input[name="company-size"]:checked')?.nextElementSibling?.textContent.trim() || '',
    leadStrategy: document.querySelector('input[name="lead-strategy"]:checked')?.nextElementSibling?.textContent.trim() || '',
    channels: Array.from(document.querySelectorAll('input[name="channel"]:checked')).map(cb => cb.parentElement?.textContent.trim() || '').filter(text => text.length > 0),
    crmLevel: Array.from(document.querySelectorAll('input[name="crm"]:checked')).map(cb => cb.parentElement?.textContent.trim() || '').filter(text => text.length > 0).join(', '),
    optimization: document.querySelector('input[name="optimization"]:checked')?.nextElementSibling?.textContent.trim() || '',
    delivery: document.querySelector('input[name="delivery"]:checked')?.nextElementSibling?.textContent.split('(')[0].trim() || '',
    estimatedPrice: document.getElementById('estimated-price')?.textContent || ''
  };
  
  return data;
}

// Generate email URL with pre-filled parameters
function generateQuoteEmailUrl(configData) {
  const subject = encodeURIComponent('Intelligent Growth System - Custom Quote Request');
  
  const body = encodeURIComponent(`Hi Nicola,

I'm interested in your Intelligent Growth System services. Here are my requirements:

Company Profile:
- Company Size: ${configData.companySize}

Scope & Automation:
- Current Stage: ${configData.leadStrategy}
- Marketing Channels: ${configData.channels.join(', ')}
- CRM Integration: ${configData.crmLevel}

Optimization & Delivery:
- Optimization Cycles: ${configData.optimization}
- Delivery Speed: ${configData.delivery}

Estimated Investment: CHF ${configData.estimatedPrice}

I'd like to discuss this further and get a detailed proposal. 

📅 Book a free consultation call: https://calendar.app.google/FgPFpZKyXjmEudQu8

Best regards,
[Your Name]`);
  
  return `mailto:nicola@sdw.solutions?subject=${subject}&body=${body}`;
}

// Generate email URL for activities
function generateActivitiesEmailUrl(configData) {
  const subject = encodeURIComponent('Intelligent Growth System - Detailed Activities Request');
  
  const body = encodeURIComponent(`Hi Nicola,

I'm interested in your Intelligent Growth System services and would like to receive the detailed activities list for my configuration:

Company Profile:
- Company Size: ${configData.companySize}

Scope & Automation:
- Current Stage: ${configData.leadStrategy}
- Marketing Channels: ${configData.channels.join(', ')}
- CRM Integration: ${configData.crmLevel}

Optimization & Delivery:
- Optimization Cycles: ${configData.optimization}
- Delivery Speed: ${configData.delivery}

Estimated Investment: CHF ${configData.estimatedPrice}

Please send me the detailed activities breakdown and proposal. I'm also interested in scheduling a consultation call to discuss this further.

📅 Book a free consultation call: https://calendar.app.google/FgPFpZKyXjmEudQu8

Best regards,
[Your Name]`);
  
  return `mailto:nicola@sdw.solutions?subject=${subject}&body=${body}`;
}